`lookupo (!"x") (of_list ([] : (string logic* typ logic) list))`, 1 answer {
}
`lookupo (!"x") (of_list [((!"x"), (!(V (!"x"))))])`, 1 answer {
q=V (x);
}
`fun q  ->
  lookupo (!"x") (of_list [((!"y"), (!(V (!"y")))); ((!"x"), (!(V (!"x"))))])
    q`, 1 answer {
q=V (x);
}
`fun q  ->
  lookupo q (of_list [((!"y"), (!(V (!"y")))); ((!"x"), (!(V (!"x"))))])
    (!(V (!"x")))`, 1 answer {
q=x;
}
`fun q  -> lookupo (!"x") q (!(V (!"y")))`, 1 answer {
q=(x,V (y)) :: _.13;
}
`infero (!(Abs ((!"x"), (!(X (!"x"))))))`, 1 answer {
q=Arr (_.14, _.14);
}
`infero
  (!(Abs ((!"f"), (!(Abs ((!"x"), (!(App ((!(X (!"f"))), (!(X (!"x"))))))))))))`, 1 answer {
q=Arr (Arr (_.21, _.18), Arr (_.21, _.18));
}
`infero
  (!(Abs ((!"x"), (!(Abs ((!"f"), (!(App ((!(X (!"f"))), (!(X (!"x"))))))))))))`, 1 answer {
q=Arr (_.21, Arr (Arr (_.21, _.18), _.18));
}
`fun q  -> infero q (!(Arr ((!(V (!"x"))), (!(V (!"x"))))))`, 2 answers {
q=Abs (_.15, X (_.15));
q=Abs (_.26, App (Abs (_.22, X (_.22)), X (_.26)));
}
`infero (!(Abs ((!"x"), (!(App ((!(X (!"x"))), (!(X (!"x")))))))))`, 1 answer {
}

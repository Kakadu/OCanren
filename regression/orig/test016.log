fun q -> prog id_set0 [just_a] (invoke "just_a" ((!^) q)), all answers {
q=5; 
}
fun q -> prog id_set0 [a_and_b] (invoke "a_and_b" ((!^) q)), all answers {
q=7; 
q=7; 
}
fun q -> prog id_set0 [a_and_b'] (invoke "a_and_b'" ((!^) q)), all answers {
q=6; 
q=5; 
}
fun q ->
  prog id_set0 [appendo]
    (invoke "appendo" ((^~) (inj_list [1; 2]) ((^.) (inj_list [3; 4]) q))), all answers {
q=[1; 2; 3; 4]; 
}
fun q ->
  prog id_set0 [appendo]
    (invoke "appendo"
       ((^~) q ((^.) (inj_list [3; 4]) (inj_list [1; 2; 3; 4])))), all answers {
q=[1; 2]; 
}
fun q ->
  prog id_set0 [appendo]
    (invoke "appendo"
       ((^~) (inj_list [1; 2]) ((^.) q (inj_list [1; 2; 3; 4])))), all answers {
q=[3; 4]; 
}
fun q r ->
  prog id_set0 [appendo]
    (invoke "appendo" ((^~) q ((^.) r (inj_list [1; 2; 3; 4])))), all answers {
q=[]; r=[1; 2; 3; 4]; 
q=[1]; r=[2; 3; 4]; 
q=[1; 2]; r=[3; 4]; 
q=[1; 2; 3]; r=[4]; 
q=[1; 2; 3; 4]; r=[]; 
}
fun q ->
  prog id_set1 reverso_list
    (invoke "reverso" ((^.) q (inj_list [5; 4; 3; 2; 1]))), all answers {
q=[1; 2; 3; 4; 5]; 
}
fun q ->
  prog id_set1 reverso_list
    (invoke "reverso" ((^.) (inj_list [1; 2; 3; 4; 5]) q)), all answers {
q=[5; 4; 3; 2; 1]; 
}
fun q ->
  prog id_set1 reverso_list
    (invoke "reverso" ((^.) (inj_list [1; 2; 3]) (inj_list [3; 2; 1]))), all answers {
q=_.10; 
}
fun q ->
  prog id_set1 reverso_list
    (invoke "reverso" ((^.) (inj_list [1; 2; 1]) (inj_list [3; 2; 1]))), all answers {
}
fun q ->
  prog id_set2 minimumo_list
    (invoke "minimumo" ((^.) (inj_nat_list [6; 5; 4; 1; 2]) q)), all answers {
q=1; 
}
fun q ->
  prog id_set2 minimumo_list (invoke "minimumo" ((^.) (inj_nat_list []) q)), all answers {
}
fun q ->
  prog id_set2 [pluso]
    (invoke "pluso" ((^~) (inj_nat 6) ((^.) (inj_nat 4) q))), all answers {
q=10; 
}
fun q r ->
  prog id_set2 [pluso] (invoke "pluso" ((^~) q ((^.) r (inj_nat 10)))), all answers {
q=0; r=10; 
q=1; r=9; 
q=2; r=8; 
q=3; r=7; 
q=4; r=6; 
q=5; r=5; 
q=6; r=4; 
q=7; r=3; 
q=8; r=2; 
q=9; r=1; 
q=10; r=0; 
}
fun q ->
  prog id_set2 [pluso; mulo]
    (invoke "mulo" ((^~) (inj_nat 3) ((^.) (inj_nat 5) q))), all answers {
q=15; 
}
fun q r ->
  prog id_set2 [pluso; mulo] (invoke "mulo" ((^~) q ((^.) r (inj_nat 36)))), all answers {
q=1; r=36; 
q=2; r=18; 
q=3; r=12; 
q=4; r=9; 
q=6; r=6; 
q=9; r=4; 
q=12; r=3; 
q=18; r=2; 
q=36; r=1; 
}
fun q ->
  prog id_set2 [map_succ]
    (invoke "map_succ"
       ((^.) (inj_nat_list [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]) q)), all answers {
q=[2; 3; 4; 5; 6; 7; 8; 9; 10; 11]; 
}
fun q ->
  prog id_set2 [map_succ]
    (invoke "map_succ"
       ((^.) q (inj_nat_list [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]))), all answers {
q=[0; 1; 2; 3; 4; 5; 6; 7; 8; 9]; 
}
fun q ->
  prog id_set3 bin_pluso_list
    (invoke "bin_pluso" ((^~) (to_bin 3) ((^.) (to_bin 6) q))), all answers {
q=[1; 0; 0; 1]; 
}
fun q ->
  prog id_set3 bin_pluso_list
    (invoke "bin_pluso" ((^~) (to_bin 2) ((^.) q (to_bin 5)))), all answers {
q=[1; 1]; 
}
fun q ->
  prog id_set3 bin_pluso_list
    (invoke "bin_pluso" ((^~) (to_bin 8) ((^.) q (to_bin 6)))), all answers {
}
fun q ->
  prog id_set3 bin_pluso_list
    (invoke "bin_pluso" ((^~) q ((^.) (to_bin 5) (to_bin 8)))), all answers {
q=[1; 1]; 
}
fun q r ->
  prog id_set3 bin_pluso_list
    (invoke "bin_pluso" ((^~) q ((^.) r (to_bin 5)))), all answers {
q=[1; 0; 1]; r=[]; 
q=[]; r=[1; 0; 1]; 
q=[0; 0; 1]; r=[1]; 
q=[0; 1]; r=[1; 1]; 
q=[1]; r=[0; 0; 1]; 
q=[1; 1]; r=[0; 1]; 
}
fun q ->
  prog id_set3 bin_multo_list
    (invoke "bin_multo" ((^~) (to_bin 5) ((^.) (to_bin 3) q))), all answers {
q=[1; 1; 1; 1]; 
}
fun q ->
  prog id_set3 bin_multo_list
    (invoke "bin_multo" ((^~) q ((^.) (to_bin 3) (to_bin 12)))), all answers {
q=[0; 0; 1]; 
}
fun q ->
  prog id_set3 bin_multo_list
    (invoke "bin_multo" ((^~) (to_bin 3) ((^.) q (to_bin 12)))), all answers {
q=[0; 0; 1]; 
}
fun q r ->
  prog id_set3 bin_multo_list
    (invoke "bin_multo" ((^~) q ((^.) r (to_bin 24)))), all answers {
q=[0; 0; 0; 1; 1]; r=[1]; 
q=[0; 0; 1; 1]; r=[0; 1]; 
q=[0; 1; 1]; r=[0; 0; 1]; 
q=[1; 1]; r=[0; 0; 0; 1]; 
q=[1]; r=[0; 0; 0; 1; 1]; 
q=[0; 1]; r=[0; 0; 1; 1]; 
q=[0; 0; 1]; r=[0; 1; 1]; 
q=[0; 0; 0; 1]; r=[1; 1]; 
}
fun q ->
  prog id_set3 bin_lto_list (invoke "bin_lto" ((^.) (to_bin 5) (to_bin 10))), all answers {
q=_.10; 
}
fun q ->
  prog id_set3 bin_lto_list (invoke "bin_lto" ((^.) (to_bin 6) (to_bin 6))), all answers {
}
fun q ->
  prog id_set3 bin_lto_list (invoke "bin_lto" ((^.) (to_bin 15) (to_bin 4))), all answers {
}
fun q -> prog id_set3 bin_lto_list (invoke "bin_lto" ((^.) q (to_bin 13))), all answers {
q=[]; 
q=[0; 0; 1; 1]; 
q=[0; 0; 0; 1]; 
q=[0; 0; 1]; 
q=[0; 1; 0; 1]; 
q=[0; 1]; 
q=[0; 1; 1]; 
q=[1]; 
q=[1; 0; 0; 1]; 
q=[1; 0; 1]; 
q=[1; 1; 0; 1]; 
q=[1; 1]; 
q=[1; 1; 1]; 
}
fun q r ->
  prog id_set3 bin_divo_list
    (invoke "bin_divo" ((^~) (to_bin 21) ((^~) (to_bin 7) ((^.) q r)))), all answers {
q=[1; 1]; r=[]; 
}
fun q r ->
  prog id_set3 bin_divo_list
    (invoke "bin_divo" ((^~) (to_bin 23) ((^~) (to_bin 5) ((^.) q r)))), all answers {
q=[0; 0; 1]; r=[1; 1]; 
}
fun q r s ->
  prog id_set3 bin_divo_list
    (invoke "bin_divo" ((^~) (to_bin 16) ((^~) q ((^.) r s)))), all answers {
q=[1]; r=[0; 0; 0; 0; 1]; s=[]; 
q=[0; 1]; r=[0; 0; 0; 1]; s=[]; 
q=[0; 0; 1]; r=[0; 0; 1]; s=[]; 
q=[0; 0; 0; 1]; r=[0; 1]; s=[]; 
q=[0; 0; 0; 0; 1]; r=[1]; s=[]; 
q=[0; 0; 1; 1]; r=[1]; s=[0; 0; 1]; 
q=[0; 1; 1]; r=[0; 1]; s=[0; 0; 1]; 
q=[0; 1; 1; 1]; r=[1]; s=[0; 1]; 
q=[1; 1; 1]; r=[0; 1]; s=[0; 1]; 
q=[0; 1; 0; 1]; r=[1]; s=[0; 1; 1]; 
q=[1; 1; 1; 1]; r=[1]; s=[1]; 
q=[1; 0; 1]; r=[1; 1]; s=[1]; 
q=[1; 1]; r=[1; 0; 1]; s=[1]; 
q=[1; 0; 1; 1]; r=[1]; s=[1; 1]; 
q=[1; 0; 0; 1]; r=[1]; s=[1; 1; 1]; 
q=[1; 1; 0; 1]; r=[1]; s=[1; 0; 1]; 
}
fun q r ->
  prog id_set3 bin_divo_list
    (invoke "bin_divo" ((^~) q ((^~) (to_bin 8) ((^.) (to_bin 4) r)))), all answers {
q=[0; 0; 0; 0; 0; 1]; r=[]; 
q=[0; 0; 1; 0; 0; 1]; r=[0; 0; 1]; 
q=[0; 1; 1; 0; 0; 1]; r=[0; 1; 1]; 
q=[0; 1; 0; 0; 0; 1]; r=[0; 1]; 
q=[1; 1; 1; 0; 0; 1]; r=[1; 1; 1]; 
q=[1; 0; 0; 0; 0; 1]; r=[1]; 
q=[1; 0; 1; 0; 0; 1]; r=[1; 0; 1]; 
q=[1; 1; 0; 0; 0; 1]; r=[1; 1]; 
}

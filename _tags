true: debug, rectypes, color(always), bin_annot, keep_asm
true: short_paths

<src/MiniKanren.*> or <regression/test*.*>: rectypes

#<ppx/*>: package(compiler-libs.common,ppx_deriving,ppx_deriving.runtime,ppx_tools.metaquot)
<ppx/*>: package(ocaml-migrate-parsetree ocaml-migrate-parsetree ppx_tools_versioned.metaquot_405)
<ppx/*>: package(ppx_tools_versioned,ppx_tools_versioned.metaquot_405,ppx_deriving.std),open(Ast_convenience_405),open(Ppx_tools_405),open(Ast_405)
#<ppx/ppx_repr.native>: package(ocaml-migrate-parsetree.driver-main)

#<ppx/*.cma>: package(ppx_deriving.api,ppx_deriving.runtime)

<regression/test100ppxgt*>: package(GT), ppx(ocamlfind ppx_deriving/ppx_deriving --as-ppx -deriving-plugin ppx/ppx_deriving_gt.cma)

<samples>: not_hygienic
<camlp5/pa_minikanren.*>: syntax(camlp5o), package(camlp5)


<src/MiniKanrenCore*.*> or <src/MiniKanrenStd*.*>: opaque
<src/MiniKanren*.*>: package(GT), ppx(ocamlfind ppx_deriving/ppx_deriving --as-ppx -deriving-plugin ppx/ppx_deriving_gt.cma)
<src/*.ml*>: package(GT)

# regression tests related stuff
<regression/orig/*>: traverse
<regression/test*.native> or <regression/test*.byte>: package(str)

<regression/stlcPPX.*>: package(GT), ppx(ocamlfind ppx_deriving/ppx_deriving --as-ppx -deriving-plugin ppx/ppx_deriving_gt.cma)
<regression/test101showT.*>: ppx(ocamlfind ppx_deriving/ppx_deriving --as-ppx -deriving-plugin ppx/ppx_deriving_showT.cma), package(ppx_deriving)

<regression/test102*.*>: ppx(ocamlfind ppx_deriving/ppx_deriving --as-ppx -deriving-plugin ppx/ppx_deriving_gt.cma), package(ppx_deriving)

#PPX tests are like 2xx
#Some tests require syntax extensions with freshes
<regression/stlcPPX.*>: rectypes
<regression/test2*.*>: package(GT), ppx(ppx/ppx_ocanren_all.native --as-ppx), ppx(ocamlfind ppx_deriving/ppx_deriving --as-ppx -deriving-plugin ppx/ppx_deriving_gt.cma)

#camlp5 stuff for tests that start from 0
<regression/test0*.*> or <regression/stlc.*>: syntax(camlp5o), package(logger.syntax), package(GT,GT.syntax.all), use_pa_minikanren
<regression/stlc.*>: rectypes

####################################################################
# JSOO toplevel related stuff
#<jsoo_runner/jsoo_runner.*>: package(js_of_ocaml.ppx,js_of_ocaml.tyxml), use_MiniKanren

# toplevel related stuff
#<toplevel/toplevel.cppo.cmo>: package(js_of_ocaml.ppx,base64)
<toplevel/toplevel.ml> or <toplevel/colorize.ml> or <toplevel/indent.ml>: package(js_of_ocaml.ppx,tyxml)
<toplevel/toplevel.cmo>: cppo,package(js_of_ocaml.ppx,compiler-libs.common,base64), js_of_ocaml
<toplevel/colorize.cm*>: package(js_of_ocaml.tyxml)
<toplevel/indent.mli> or <toplevel/colorize.mli>: package(js_of_ocaml.tyxml)
<toplevel/toplevel.byte>: cppo, pretty, package(js_of_ocaml.tyxml,js_of_ocaml.toplevel),export_package(lwt)
<toplevel/toplevel.js>: export_package(lwt),export_package(js_of_ocaml),export_package(js_of_ocaml.toplevel),package(ppx_tools)
<toplevel/toplevel.js>: jsopt(+toplevel.js),jsopt(+dynlink.js),jsopt(+nat.js),jsopt(+weak.js)
<toplevel/toplevel.js>: package(compiler-libs.common)
<toplevel/*>:  not_hygienic
